
Input({ twoway: true, labelWidth: '100px', textarea: false })
    @{
        input: HTMLInputElement | HTMLTextAreaElement;
    }
    .style { 
        width: 100%;
        display: flex; 
    }
    #label:span
        .style {
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
	onChange() { 
        let val = this.input.value;
        if(this.options.twoway && this.options.key) {
            this.data.set(this.options.key, val);
        }
        this.emit('change', val); 
    }
    value() {
        return this.input.value;
    }
    clear() {
        this.input.value = '';
    }
    init() {
        this.input = document.createElement(this.options.textarea ? 'textarea' : 'input');
        SyncUtils.mergeMap(this.input.style, {
            flex: 1,
            fontSize: '1em',
            padding: '0.5em 0',
            backgroundColor: 'transparent',
            border: 'none'
        });
        if(this.options.textarea) {
            this.el.style.border = '1px solid rgba(0,0,0,0.25)';
            this.el.style.padding = '4px';
        } else {
            this.el.style.borderBottom = '1px solid rgba(0,0,0,0.25)';
        }

        this.el.appendChild(this.input);

        this.label.style.width = this.options.labelWidth;
        if(this.options.label) {
            this.label.innerHTML = this.options.label;
        }
        this.label.style.display = this.options.label ? 'flex' : 'none';
    }
    render() {		
        if(this.data) {
            let val = this.options.key ? this.data.get(this.options.key) || '' : this.data || '';

            if(this.input.value != val) {
                this.input.value = val;
            }
        }
    }

TextArea({ tag: 'textarea', twoway: true, labelWidth: '100px' })
    .style { 
        width: 100%;
        display: flex; 
        flex: 1;
        font-size: 1em;
        padding: 0.5em;
        background-color: transparent;
    }
    onInput() {
        this.autoresize();
    }
	onChange() { 
        let val = (this.el as HTMLTextAreaElement).value;
        if(this.options.twoway && this.options.key) {
            this.data.set(this.options.key, val);
        }
        this.emit('change', val); 
    }
    value() {
        return (this.el as HTMLTextAreaElement).value;
    }
    clear() {
        (this.el as HTMLTextAreaElement).value = '';
    }
    autoresize() {
        var scrollLeft = window.pageXOffset ||
            (document.documentElement || document.body.parentNode || document.body).scrollLeft;

        var scrollTop  = window.pageYOffset || 
            (document.documentElement || document.body.parentNode || document.body).scrollTop;

        this.el.style.minHeight = 'auto';
        this.el.style.minHeight = this.el.scrollHeight + 10 + 'px';

        window.scrollTo(scrollLeft, scrollTop);
    }
    render() {		
        if(this.data) {
            let val = this.options.key ? this.data.get(this.options.key) || '' : this.data || '';

            if((this.el as HTMLTextAreaElement).value != val) {
                (this.el as HTMLTextAreaElement).value = val;
            }
        }
        this.autoresize();
    }



Modal({ hideOnClick: true })
    @{
        view: SyncView<SyncNode>;
    }
    .style { 
        position: fixed;
        left: 0; right: 0; top: 0; bottom: 0;
        background-color: rgba(0,0,0,0.7);
        overflow-y: scroll;
        display: flex;
        align-items: center;
        justify-content: center;	
    }
    onClick() { if(this.options.hideOnClick) { this.hide(); } }
    #viewContainer
        onClick(e) { e.stopPropagation(); }
    init() {
        this.hide();
        if(this.options.view) {
            this.view = new this.options.view();
            this.view.on('hide', () => {
                this.hide();
                this.emit('hide');
            });
            this.viewContainer.appendChild(this.view.el);
        }
    }
    render() {
        if(this.view) this.view.update(this.data);
    } 

SimpleHeader[row]
    #title:span[row-fill]
        .style { 
            font-weight: bold; 
            font-size: 1.5em;
        }
    #addBtn:button[row-nofill] 'Add' onClick() { this.emit('add') }
    showButtons(val: boolean) {
        this.addBtn.style.display = val ? 'flex' : 'none';
    }
    init() {
        this.title.innerHTML = this.options.title;
    }


Tabs[col]
  @{
    selectedItem: TabHeaderItem;
    tabsArr: Tab[] = [];
  }
  #headers[col-nofill row]
    .style { border-bottom: 1px solid #CCC; }
  #scrollContainer[col-fill]
    .style { overflow-y: auto; }
    #tabs:div
  addTab(title: string, view: SyncView<SyncNode>) {
    let tab = new Tab();
    tab.header = new TabHeaderItem({ text: title });
    tab.header.tabsContainer = this;
    tab.header.init();
    tab.view = view;
    tab.view.init();
    tab.init();

    tab.header.on('selected', () => {
      this.selectedItem = tab.header;
      this.emit('selected', this.selectedItem);
      this.tabs.innerHTML = '';
      this.tabs.appendChild(tab.view.el);
    });

    this.headers.appendChild(tab.header.el);
    this.tabsArr.push(tab);
  }
  selectTab(index: number) {
    if(this.tabsArr.length > index) {
        this.tabsArr[index].header.select();
    }
  }

TabHeaderItem[row-nofill pad-small no-select]
  @{
    tabsContainer: Tabs;
  }
  .style { border: 1px solid #BBB; min-width: 50px; text-align: center; }
  #text:span $options.text
  select() {
    this.emit('selected', this);
  }
  onClick() {
    this.select();
  }
  init() {
    this.bind();
    this.tabsContainer.on('selected', (item: TabHeaderItem) => {
      let selected = item === this;
      this.el.style.border = selected ? '1px solid #666' : '1px solid #BBB';
      this.el.style.borderBottom = selected ? 'none' : '1px solid #BBB';
      this.el.style.backgroundColor = selected ?  '#FFF' : '#CCC';
    });
  }

Tab
  @{
    header: TabHeaderItem;
    view: SyncView<SyncNode>;
  }


AddText({ btnText: 'add' })[row]
  #input:input[row-fill]
  #addBtn:button[row-nofill material-icons] $options.btnText
    onClick() { this.emit('add', this.input.value); }
  clear() { this.input.value = ''; }
  init() {
    this.bind();
  }

AdminMode
  @{
    enabled: boolean = false;
  }
  init() {
    document.addEventListener('keypress', e => {
			if(e.keyCode === 30) { // 30 = ctrl+^ && 94 = '^'
				this.enabled = !this.enabled;
				this.emit('changed', this.enabled); 
			}
		});
  }

