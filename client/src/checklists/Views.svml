{
import * as Models from './Models';
import { AdminMode, Modal, Input, SimpleHeader, AddText } from '../Components';
import { NewChecklist, EditChecklist } from './ViewsEdit'
}

MainView<Models.Main>[row pad-small]
  @{
    selectedChecklist: Models.List;
  }
  .style { max-width: 900px; margin: 1em auto; }
  #checklists:Checklists[row-nofill] $data
    .style { width: 250px; }
    onSelected(list: Models.List) {
      console.log('list', list)
      this.selectedChecklist = list;
      this.bind();
    }
  #checklist:Checklist[row-fill] $selectedChecklist
    .style { margin-left: 1em; }

Checklists<Models.Main>
  #addModal:Modal({ view: NewChecklist }) $data.checklists
  #header[row]
    .style { margin-bottom: 1em; }
    #title[row-fill bold] 'Checklists'
    #showModal:button[row-nofill] 'New Checklist' 
      onClick() { this.addModal.show(); }
  #checklists:SyncList({ item: ChecklistListItem }) $data.checklists
    onSelected(view: SyncView<SyncNode>, list: Models.List) { 
      this.emit('selected', list); 
    }

  
Checklist<Models.List>
  .style { max-width: 400px; }
  #editModal:Modal({ view: EditChecklist }) $data
  #header[row center-vert header-small]
    #name[row-fill bold]  $data.name
    #editList:button[row-nofill] 'Edit List'
      onClick() { this.editModal.show(); }
    #resetList:button[row-nofill] 'Reset List'
      onClick() {
        if(!confirm('Reset this checklist?')) return;
        let merge = {} as any;
        SyncUtils.forEach(this.data.groups, (group: Models.Group) => {
          let groupMerge = { items: {}} as any;
          merge[group.key] = groupMerge;
          SyncUtils.forEach(group.items, (item: Models.Item) => {
            groupMerge.items[item.key] = { completedAt: '' };
          });
        });
        this.data.groups.merge(merge);
      }
  #groups:SyncList({ item: Group }) $data.groups
    .style { margin-left: 1em; }
  render() {
    this.el.classList.toggle('hidden', !this.data);
  }
    
Group<Models.Group>
  #header[row]
    #name[row-fill bold center-vert header-small] $data.name
  #items:SyncList({ item: Item }) $data.items
    .style { margin-left: 1em; }

Item<Models.Item>
  .style { padding: 8px; border: 1px solid #777; }
  #name[center-vert] $data.name
  onClick() {
    this.data.set('completedAt', 
      this.data.completedAt ? '' : new Date().toISOString()
    );
  }
  render() {
    this.name.style.textDecoration = this.data.completedAt ? 'line-through' : 'none';
  }



ChecklistListItem
  .style { 
    border: 1px solid #777;
    padding: 8px;
  }
  #name $data.name
  onClick() {
    this.emit('selected', this.data);
  }